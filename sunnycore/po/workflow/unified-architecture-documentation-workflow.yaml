# Unified Architecture Documentation Workflow
# For architecture-documenter agent complete execution process
# Integrates current implementation with plans, generates synchronized architecture overview and details, ensures documentation and code synchronization

# ðŸ”„ Workflow Todo List Creation Process
todo_list_creation:
  description: "AI must create todo list containing all workflow steps before executing any workflow steps"
  importance: "critical"

  process_steps:
    1_analyze_workflow:
      description: "Analyze workflow structure - carefully read entire workflow file, identify all stages, steps and tasks"
      priority: "high"

    2_extract_tasks:
      description: "Extract key tasks - convert core tasks of each stage to specific todo items"
      priority: "high"

    3_set_priorities:
      description: "Set priorities - set priorities based on task importance and dependencies (high/medium/low)"
      priority: "medium"

    4_create_todo_list:
      description: "Create Todo List - use todo_write tool to create structured todo list containing all steps"
      priority: "high"

    5_execute_workflow:
      description: "Start execution - execute tasks in todo list order, update status timely"
      priority: "high"

  requirements:
    coverage: "Each main stage should have corresponding todo item"
    validation: "Key validation checkpoints must be included in todo list"
    priority_setting: "Set reasonable priorities, ensure dependency relationships respected"
    status_tracking: "Update todo status timely during execution (pending â†’ in_progress â†’ completed)"

# Separator line, following is original workflow content
---

workflow_name: "unified-architecture-documentation-workflow"
version: "2.2.0"
description: "Integrate current implementation with plans, generate latest architecture overview and details, ensure documentation and code synchronization"

# Workflow execution settings
execution_settings:
  deterministic: true
  parallel_enabled: true
  max_parallel_tasks: 10
  batch_size: 7
  cache_enabled: true
  fail_fast: false  # Record errors but do not interrupt

# Prerequisites check
prerequisites:
  required_files:
    # Core configuration files
    - path: "{project_root}/sunnycore/po/templates/architecture-doc-tmpl.yaml"
      type: "template"
      critical: false  # Log warning if missing and continue
    - path: "{project_root}/sunnycore/po/enforcement/architecture-documenter-enforcement.md"
      type: "enforcement"
      critical: false

  recommended_files:
    # Specification files (recommended to exist)
    - path: "{{project_root}}/docs/specs/task.md"
      type: "specification"
    - path: "{{project_root}}/docs/specs/requirements.md"
      type: "specification"
    - path: "{{project_root}}/docs/specs/design.md"
      type: "specification"

  optional_directories:
    # Plan files directory
    - path: "{{project_root}}/docs/implementation-plan/"
      type: "plans"
      pattern: "*-plan.*"
    # Existing architecture docs
    - path: "{{project_root}}/docs/architecture/"
      type: "existing_docs"

  validation_rules:
    - rule: "project_root_resolved"
      description: "project_root must resolve to valid path"
    - rule: "codebase_accessible"
      description: "Codebase must be readable"
    - rule: "output_directory_writable"
      description: "{{project_root}}/docs/architecture/ must be writable"

# Main execution stages
stages:

  # Stage 1: Environment preparation and deterministic setting
  - name: "preparation"
    description: "Load settings and prepare execution environment"
    parallel: false
    steps:
      - name: "load_template"
        action: "read_file"
        target: "{project_root}/sunnycore/po/templates/architecture-doc-tmpl.yaml"
        required: false
        on_failure: "log_warning"

      - name: "load_enforcement"
        action: "read_file"
        target: "{project_root}/sunnycore/po/enforcement/architecture-documenter-enforcement.md"
        required: false
        on_failure: "log_warning"

      - name: "verify_output_path"
        action: "ensure_directory"
        target: "{{project_root}}/docs/architecture/"
        permissions: "write"

      - name: "verify_diagrams_path"
        action: "ensure_directory"
        target: "{{project_root}}/docs/architecture/diagrams/"
        permissions: "write"

  # Stage 2: Specification files collection and analysis
  - name: "specification_discovery"
    description: "Synchronously collect and analyze specification files"
    parallel: true
    depends_on: ["preparation"]
    steps:
      - name: "load_task_specification"
        action: "read_file"
        target: "{{project_root}}/docs/specs/task.md"
        required: false
        extract_sections: ["objectives", "requirements", "constraints"]
        on_failure: "log_warning"

      - name: "load_requirements"
        action: "read_file"
        target: "{{project_root}}/docs/specs/requirements.md"
        required: false
        extract_sections: ["functional_requirements", "non_functional_requirements"]
        on_failure: "log_warning"

      - name: "load_design_specifications"
        action: "read_file"
        target: "{{project_root}}/docs/specs/design.md"
        required: false
        extract_sections: ["architecture", "components", "interfaces", "data_models"]
        on_failure: "log_warning"

      - name: "extract_business_context"
        action: "analyze_content"
        sources: ["task_specification", "requirements", "design_specifications"]
        focus: "business_drivers"
        output: "business_context"

  # Stage 3: Implementation plans collection and analysis
  - name: "implementation_plan_discovery"
    description: "Collect and analyze implementation plans"
    parallel: true
    depends_on: ["specification_discovery"]
    steps:
      - name: "scan_implementation_plans"
        action: "glob_search"
        target: "{{project_root}}/docs/implementation-plan/*-plan.*"
        extract_patterns:
          - "architecture"
          - "modules"
          - "interfaces"
          - "data_models"
          - "technology_stack"
        on_empty: "log_info"

      - name: "analyze_architectural_decisions"
        action: "extract_decisions"
        sources: "implementation_plans"
        focus: "architecture_decisions"
        include_rationale: true
        output: "architectural_decisions"

      - name: "extract_planned_components"
        action: "analyze_structure"
        sources: "implementation_plans"
        extract: "component_definitions"
        output: "planned_components"

  # Stage 4: Codebase scanning and analysis
  - name: "codebase_analysis"
    description: "Synchronously scan codebase to get actual architecture"
    parallel: true
    depends_on: ["implementation_plan_discovery"]
    steps:
      - name: "scan_interface_definitions"
        action: "grep_search"
        target: "{{project_root}}"
        patterns:
          - "interface\\s+\\w+"  # TypeScript/Go interfaces
          - "class\\s+\\w+.*:"   # Python classes
          - "public\\s+class"    # Java classes
          - "@RestController"    # Spring controllers
          - "app\\.route"        # Flask routes
          - "router\\."          # Express routes
        file_types: ["ts", "tsx", "js", "jsx", "py", "java", "go", "rs"]
        output: "actual_interfaces"

      - name: "scan_data_models"
        action: "grep_search"
        target: "{{project_root}}"
        patterns:
          - "CREATE TABLE"       # SQL DDL
          - "class.*Model"       # ORM models
          - "interface.*Entity"  # TypeScript entities
          - "@Entity"           # JPA entities
          - "Schema\\("         # Mongoose schemas
        file_types: ["sql", "py", "ts", "tsx", "java", "js"]
        output: "actual_data_models"

      - name: "scan_api_routes"
        action: "grep_search"
        target: "{{project_root}}"
        patterns:
          - "@GetMapping"
          - "@PostMapping"
          - "@PutMapping"
          - "@DeleteMapping"
          - "app\\.(get|post|put|delete)"
          - "router\\.(get|post|put|delete)"
        file_types: ["java", "py", "js", "ts", "tsx"]
        output: "actual_api_routes"

      - name: "scan_infrastructure_config"
        action: "glob_search"
        target: "{{project_root}}"
        patterns:
          - "**/docker-compose*.yml"
          - "**/Dockerfile*"
          - "**/k8s/**/*.yaml"
          - "**/terraform/**/*.tf"
          - "**/.env*"
          - "**/application*.yml"
          - "**/application*.properties"
        output: "infrastructure_config"

      - name: "analyze_dependency_structure"
        action: "analyze_imports"
        target: "{{project_root}}"
        focus: "module_dependencies"
        output: "dependency_graph"

  # Stage 5: Architecture model establishment
  - name: "architecture_modeling"
    description: "Establish architecture models based on collected information"
    parallel: false
    depends_on: ["codebase_analysis"]
    steps:
      - name: "reconcile_planned_vs_actual"
        action: "compare_architectures"
        planned_source: "planned_components"
        actual_source: ["actual_interfaces", "actual_data_models", "actual_api_routes"]
        identify: "discrepancies"
        output: "architecture_reconciliation"

      - name: "build_system_context"
        action: "model_system_context"
        sources: ["business_context", "actual_interfaces", "infrastructure_config"]
        include_external_systems: true
        output: "system_context_model"

      - name: "build_container_view"
        action: "model_containers"
        sources: ["infrastructure_config", "dependency_graph", "architectural_decisions"]
        include_data_stores: true
        output: "container_model"

      - name: "build_component_view"
        action: "model_components"
        sources: ["actual_interfaces", "planned_components", "dependency_graph"]
        focus: "internal_structure"
        output: "component_model"

      - name: "build_data_flow"
        action: "model_data_flow"
        sources: ["actual_api_routes", "actual_data_models", "business_context"]
        trace_user_journeys: true
        output: "data_flow_model"

  # Stage 6: Diagram generation
  - name: "diagram_generation"
    description: "Generate Mermaid architecture diagrams"
    parallel: true
    depends_on: ["architecture_modeling"]
    steps:
      - name: "generate_system_context_diagram"
        action: "create_mermaid_diagram"
        type: "graph TD"
        source: "system_context_model"
        title: "System Context Diagram"
        output_file: "{{project_root}}/docs/architecture/diagrams/system-context.mmd"

      - name: "generate_container_diagram"
        action: "create_mermaid_diagram"
        type: "graph TB"
        source: "container_model"
        title: "Container Diagram"
        output_file: "{{project_root}}/docs/architecture/diagrams/containers.mmd"

      - name: "generate_component_diagram"
        action: "create_mermaid_diagram"
        type: "graph LR"
        source: "component_model"
        title: "Component Diagram"
        output_file: "{{project_root}}/docs/architecture/diagrams/components.mmd"

      - name: "generate_data_flow_diagram"
        action: "create_mermaid_diagram"
        type: "sequenceDiagram"
        source: "data_flow_model"
        title: "Data Flow Diagram"
        output_file: "{{project_root}}/docs/architecture/diagrams/data-flow.mmd"

      - name: "generate_deployment_diagram"
        action: "create_mermaid_diagram"
        type: "graph TD"
        source: "infrastructure_config"
        title: "Deployment Diagram"
        output_file: "{{project_root}}/docs/architecture/diagrams/deployment.mmd"

  # Stage 7: Documentation content generation
  - name: "documentation_generation"
    description: "Generate architecture documentation content according to template"
    parallel: false
    depends_on: ["diagram_generation"]
    steps:
      - name: "populate_template"
        action: "template_fill"
        template_source: "architecture-doc-tmpl.yaml"
        data_sources:
          - "system_context_model"
          - "container_model"
          - "component_model"
          - "data_flow_model"
          - "architecture_reconciliation"
          - "architectural_decisions"
        placeholder_handling: "mark_as_na_with_reason"

      - name: "add_diagram_references"
        action: "embed_diagrams"
        diagrams:
          - path: "diagrams/system-context.mmd"
            section: "system_overview"
          - path: "diagrams/containers.mmd"
            section: "container_architecture"
          - path: "diagrams/components.mmd"
            section: "component_architecture"
          - path: "diagrams/data-flow.mmd"
            section: "data_flow"
          - path: "diagrams/deployment.mmd"
            section: "deployment"

      - name: "add_code_navigation"
        action: "create_code_links"
        sources: ["actual_interfaces", "actual_data_models", "actual_api_routes"]
        link_format: "relative_path_with_line_numbers"

      - name: "add_adr_references"
        action: "link_architectural_decisions"
        source: "architectural_decisions"
        adr_directory: "{{project_root}}/docs/architecture/decisions/"
        create_missing_adr_stubs: true

      - name: "add_metadata"
        action: "add_metadata"
        fields:
          - "generation_timestamp"
          - "codebase_snapshot_hash"
          - "specification_versions"
          - "discrepancy_count"
          - "coverage_metrics"

  # Stage 8: Synchronization validation
  - name: "synchronization_validation"
    description: "Validate synchronization between documentation and actual implementation"
    parallel: false
    depends_on: ["documentation_generation"]
    steps:
      - name: "validate_api_contract_sync"
        action: "validate_consistency"
        documented: "api_specifications"
        actual: "actual_api_routes"
        tolerance: "exact_match"
        output: "api_sync_report"

      - name: "validate_data_model_sync"
        action: "validate_consistency"
        documented: "data_model_documentation"
        actual: "actual_data_models"
        tolerance: "structural_match"
        output: "data_model_sync_report"

      - name: "validate_component_sync"
        action: "validate_consistency"
        documented: "component_documentation"
        actual: "actual_interfaces"
        tolerance: "interface_match"
        output: "component_sync_report"

      - name: "identify_evolution_opportunities"
        action: "analyze_evolution"
        source: "architecture_reconciliation"
        focus: "improvement_opportunities"
        output: "evolution_recommendations"

  # Stage 9: Output and final validation
  - name: "output_and_validation"
    description: "Generate final documentation and perform quality validation"
    parallel: false
    depends_on: ["synchronization_validation"]
    steps:
      - name: "validate_content"
        action: "content_validation"
        checks:
          - "no_placeholders_remaining"
          - "all_diagrams_referenced"
          - "code_links_valid"
          - "structure_compliance"
          - "minimum_content_length"
        failure_action: "log_and_continue"

      - name: "validate_discrepancy_handling"
        action: "discrepancy_validation"
        checks:
          - "all_discrepancies_documented"
          - "evolution_plans_provided"
          - "risk_assessments_included"
        output: "discrepancy_report"

      - name: "write_main_documentation"
        action: "write_file"
        target: "{{project_root}}/docs/architecture/architecture.md"
        backup: true
        backup_path: "{{project_root}}/docs/architecture/architecture-{{timestamp}}.md"

      - name: "write_sync_reports"
        action: "write_files"
        targets:
          - file: "{{project_root}}/docs/architecture/sync-reports/api-sync.md"
            content: "api_sync_report"
          - file: "{{project_root}}/docs/architecture/sync-reports/data-model-sync.md"
            content: "data_model_sync_report"
          - file: "{{project_root}}/docs/architecture/sync-reports/component-sync.md"
            content: "component_sync_report"

      - name: "update_architecture_index"
        action: "update_index"
        target: "{{project_root}}/docs/architecture/index.md"
        add_entries:
          - "architecture.md"
          - "diagrams/"
          - "sync-reports/"
        include_metadata: true

# Architecture analysis standards
analysis_standards:
  interface_detection:
    languages: ["typescript", "javascript", "python", "java", "go", "rust"]
    patterns:
      typescript: ["interface\\s+\\w+", "type\\s+\\w+\\s*="]
      python: ["class\\s+\\w+.*:", "def\\s+\\w+\\("]
      java: ["public\\s+interface", "public\\s+class"]

  data_model_detection:
    sources: ["sql_ddl", "orm_models", "schema_definitions"]
    validation: "structural_consistency"

  api_route_detection:
    frameworks: ["spring", "flask", "express", "fastapi", "gin"]
    extract: ["method", "path", "parameters", "responses"]

  dependency_analysis:
    scope: ["internal_modules", "external_libraries"]
    depth: "full_tree"
    circular_detection: true

# Diagram generation specifications
diagram_specifications:
  system_context:
    type: "graph TD"
    elements: ["system", "users", "external_systems"]
    max_nodes: 15

  container:
    type: "graph TB"
    elements: ["services", "databases", "message_queues"]
    include_technologies: true

  component:
    type: "graph LR"
    elements: ["modules", "interfaces", "data_stores"]
    show_dependencies: true

  data_flow:
    type: "sequenceDiagram"
    trace_user_journeys: true
    include_error_paths: true

# Synchronization validation rules
synchronization_rules:
  api_contracts:
    tolerance: "exact"
    check_methods: ["GET", "POST", "PUT", "DELETE"]
    check_parameters: true
    check_responses: true

  data_models:
    tolerance: "structural"
    check_fields: true
    check_types: true
    check_relationships: true

  components:
    tolerance: "interface"
    check_public_methods: true
    check_dependencies: true

  infrastructure:
    tolerance: "configuration"
    check_services: true
    check_ports: true
    check_volumes: true

# Error handling strategies
error_handling:
  specification_file_missing:
    action: "log_warning"
    continue: true
    use_defaults: true

  codebase_scan_failure:
    action: "retry_with_reduced_scope"
    max_retries: 2
    continue: true

  diagram_generation_failure:
    action: "create_text_description"
    continue: true

  synchronization_mismatch:
    action: "document_discrepancy"
    continue: true
    create_evolution_plan: true

# Quality assurance checks
quality_assurance:
  documentation_completeness:
    required_sections: ["overview", "containers", "components", "data_flow", "deployment"]
    minimum_content_per_section: 100

  diagram_quality:
    required_diagrams: ["system-context", "containers", "components"]
    diagram_validation: "mermaid_syntax"

  synchronization_quality:
    max_acceptable_discrepancies: 5
    critical_discrepancy_threshold: 0

  navigation_quality:
    code_link_validity: 100
    cross_reference_completeness: 90

# Parallel processing strategies
parallelization:
  specification_discovery:
    max_concurrent: 5
    timeout_per_task: 15

  codebase_analysis:
    max_concurrent: 8
    timeout_per_task: 60
    shared_cache: true

  diagram_generation:
    max_concurrent: 5
    timeout_per_task: 30

# Caching strategies
caching:
  codebase_analysis:
    strategy: "content_hash"
    ttl_hours: 6
    invalidation_triggers: ["file_modification", "git_commit"]

  specification_analysis:
    strategy: "file_hash"
    ttl_hours: 24

  diagram_generation:
    strategy: "model_hash"
    ttl_hours: 12

# Output validation rules
validation_rules:
  content_quality:
    - rule: "all_required_sections_present"
      severity: "error"
    - rule: "code_links_valid"
      severity: "warning"
      threshold: 95
    - rule: "diagrams_render_correctly"
      severity: "error"

  synchronization_quality:
    - rule: "critical_discrepancies_resolved"
      severity: "error"
    - rule: "evolution_plans_documented"
      severity: "warning"
    - rule: "adr_links_valid"
      severity: "info"

# Success metrics
success_metrics:
  coverage_metrics:
    - "specification_coverage_percentage"
    - "codebase_analysis_completeness"
    - "diagram_generation_success_rate"

  quality_metrics:
    - "synchronization_accuracy"
    - "navigation_link_validity"
    - "diagram_syntax_validity"

  usability_metrics:
    - "new_developer_onboarding_time"
    - "architecture_decision_traceability"
    - "technical_debt_visibility"

# Post-processing actions
post_processing:
  architecture_maintenance:
    - action: "schedule_synchronization_checks"
      frequency: "weekly"
    - action: "update_evolution_roadmap"
      based_on: "discrepancy_trends"

  continuous_improvement:
    - action: "analyze_documentation_usage"
      source: "access_patterns"
    - action: "identify_documentation_gaps"
      method: "user_feedback_analysis"
    - action: "optimize_diagram_layouts"
      based_on: "readability_metrics"

# Execution report template
execution_report:
  summary:
    - "specifications_processed"
    - "codebase_elements_analyzed"
    - "diagrams_generated"
    - "synchronization_discrepancies"

  details:
    - "specification_analysis_breakdown"
    - "codebase_scan_results"
    - "diagram_generation_log"
    - "synchronization_validation_report"

  recommendations:
    - "architecture_evolution_priorities"
    - "documentation_improvement_suggestions"
    - "synchronization_automation_opportunities"
