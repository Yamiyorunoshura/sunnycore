---
template: unified-file-classification-workflow
version: 1

# 🔄 工作流程Todo List製作流程
todo_list_creation:
  description: "在開始執行任何工作流程步驟之前，AI必須先創建包含所有workflow步驟的todo list"
  importance: "critical"
  
  process_steps:
    1_analyze_workflow:
      description: "分析工作流程結構 - 仔細閱讀整個workflow文件，識別所有階段、步驟和任務"
      priority: "high"
      
    2_extract_tasks:
      description: "提取關鍵任務 - 將每個階段的核心任務轉換為具體的todo項目"
      priority: "high"
      
    3_set_priorities:
      description: "設定優先級 - 根據任務的重要性和依賴關係設定優先級（high/medium/low）"
      priority: "medium"
      
    4_create_todo_list:
      description: "創建Todo List - 使用todo_write工具創建包含所有步驟的結構化todo list"
      priority: "high"
      
    5_execute_workflow:
      description: "開始執行 - 按照todo list的順序執行任務，並及時更新狀態"
      priority: "high"
  
  requirements:
    coverage: "每個主要階段都應該有對應的todo項目"
    validation: "關鍵的驗證檢查點必須包含在todo list中"
    priority_setting: "設定合理的優先級，確保依賴關係得到尊重"
    status_tracking: "在執行過程中及時更新todo狀態（pending → in_progress → completed）"

# 分隔線，以下為原始workflow內容
---

workflow:
  name: "統一檔案分類工作流程"
  description: "識別和分類專案檔案，區分臨時測試檔案和需要保留的核心檔案，生成清理建議和風險評估。"
  enforcement_level: "strict"
  halt_on_validation_failure: true

inputs:
  project_root: "<auto>"
  task_id: "<optional>"
  classification_scope: "full_project"  # full_project, specific_directories, file_types

execution_hints:
  determinism:
    temperature: 0
    top_p: 0
    top_k: 1
    seed: 42
    response_variability: "none"
  parallelization:
    enabled: true
    max_concurrency: 10
    in_stages:
      file_scanning:
        - "scan_project_structure"
        - "identify_file_types"
        - "analyze_file_sizes"
        - "detect_hidden_files"
      classification_analysis:
        - "analyze_source_code_files"
        - "analyze_test_files"
        - "analyze_config_files"
        - "analyze_documentation_files"
        - "analyze_script_files"
        - "analyze_dependency_relationships"
      risk_assessment:
        - "assess_cleanup_risks"
        - "evaluate_dependency_impacts"
        - "analyze_functional_impacts"
        - "identify_safety_concerns"
  caching:
    enabled: true
    strategy: "content_hash"
    key_paths:
      - "{{project_root}}/src/**/*"
      - "{{project_root}}/test/**/*"
      - "{{project_root}}/docs/**/*"
      - "{{project_root}}/config/**/*"
    expire_on_changes: true
  ordering:
    list_sorting: "stable_lexicographic"
    normalize_paths: true

path_aliases:
  WORKFLOW_FILE: "~/cursor-claude/core/po/workflow/unified-file-classification-workflow.yaml"
  ENFORCEMENT_FILE: "~/cursor-claude/core/po/enforcement/file-classifier-enforcement.md"

classification_criteria:
  must_keep:
    - "source_code_files"
    - "test_files"
    - "config_files"
    - "documentation_files"
    - "script_files"
    - "license_files"
  can_clean:
    - "temporary_files"
    - "build_artifacts"
    - "ide_configs"
    - "backup_files"
    - "cache_files"
  needs_review:
    - "boundary_files"
    - "large_files"
    - "binary_files"
    - "hidden_files"
    - "external_dependencies"

file_type_patterns:
  source_code:
    - "*.js", "*.ts", "*.jsx", "*.tsx"
    - "*.py", "*.java", "*.cpp", "*.c", "*.cs"
    - "*.go", "*.rs", "*.php", "*.rb"
    - "*.swift", "*.kt", "*.scala"
  test_files:
    - "*test*.js", "*test*.ts", "*test*.py"
    - "*spec*.js", "*spec*.ts", "*spec*.py"
    - "test_*.py", "test_*.js", "test_*.ts"
  config_files:
    - "*.json", "*.yaml", "*.yml", "*.toml"
    - "*.env", "*.config", "*.conf"
    - "package.json", "requirements.txt", "pom.xml"
  documentation:
    - "*.md", "*.rst", "*.txt"
    - "*.pdf", "*.doc", "*.docx"
    - "README*", "CHANGELOG*", "LICENSE*"
  scripts:
    - "*.sh", "*.bat", "*.ps1"
    - "Makefile", "Dockerfile", "docker-compose*"
  temporary:
    - "*.tmp", "*.temp", "*.bak", "*.backup"
    - "*.log", "*.out", "*.err"
    - "node_modules/", "dist/", "build/", "target/"

# 檔案掃描階段
file_scanning:
  description: "掃描和分析專案檔案結構"
  steps:
    scan_project_structure:
      description: "掃描專案目錄結構"
      method: "recursive_directory_scan"
      output: "project_structure_map"
      validation:
        min_files: 1
        max_depth: 10
        exclude_patterns:
          - ".git/**"
          - "node_modules/**"
          - "dist/**"
          - "build/**"
          - "target/**"
    
    identify_file_types:
      description: "識別檔案類型"
      method: "file_extension_analysis"
      input: "project_structure_map"
      output: "file_type_classification"
      validation:
        required_categories: ["source_code", "test_files", "config_files", "documentation"]
    
    analyze_file_sizes:
      description: "分析檔案大小"
      method: "file_size_analysis"
      input: "project_structure_map"
      output: "file_size_statistics"
      validation:
        max_file_size: "100MB"
        large_file_threshold: "10MB"
    
    detect_hidden_files:
      description: "檢測隱藏檔案"
      method: "hidden_file_detection"
      input: "project_structure_map"
      output: "hidden_files_list"
      validation:
        include_patterns: [".*"]

# 分類分析階段
classification_analysis:
  description: "深入分析檔案內容和依賴關係"
  steps:
    analyze_source_code_files:
      description: "分析源代碼檔案"
      method: "source_code_analysis"
      input: "file_type_classification"
      output: "source_code_analysis"
      validation:
        min_analysis_depth: "function_level"
        required_metrics: ["complexity", "dependencies", "test_coverage"]
    
    analyze_test_files:
      description: "分析測試檔案"
      method: "test_file_analysis"
      input: "file_type_classification"
      output: "test_file_analysis"
      validation:
        required_metrics: ["test_coverage", "test_types", "test_quality"]
    
    analyze_config_files:
      description: "分析配置檔案"
      method: "config_file_analysis"
      input: "file_type_classification"
      output: "config_file_analysis"
      validation:
        required_metrics: ["environment_specific", "security_implications", "dependencies"]
    
    analyze_documentation_files:
      description: "分析文檔檔案"
      method: "documentation_analysis"
      input: "file_type_classification"
      output: "documentation_analysis"
      validation:
        required_metrics: ["completeness", "accuracy", "usefulness"]
    
    analyze_script_files:
      description: "分析腳本檔案"
      method: "script_file_analysis"
      input: "file_type_classification"
      output: "script_file_analysis"
      validation:
        required_metrics: ["functionality", "safety", "maintainability"]
    
    analyze_dependency_relationships:
      description: "分析檔案依賴關係"
      method: "dependency_analysis"
      input: ["source_code_analysis", "config_file_analysis"]
      output: "dependency_graph"
      validation:
        required_metrics: ["imports", "exports", "circular_dependencies"]

# 風險評估階段
risk_assessment:
  description: "評估檔案清理的風險和影響"
  steps:
    assess_cleanup_risks:
      description: "評估清理風險"
      method: "risk_assessment_analysis"
      input: ["file_type_classification", "dependency_graph"]
      output: "cleanup_risk_assessment"
      validation:
        required_risk_levels: ["low", "medium", "high", "critical"]
        required_metrics: ["probability", "impact", "mitigation"]
    
    evaluate_dependency_impacts:
      description: "評估依賴影響"
      method: "dependency_impact_analysis"
      input: "dependency_graph"
      output: "dependency_impact_assessment"
      validation:
        required_metrics: ["direct_impact", "indirect_impact", "cascade_effects"]
    
    analyze_functional_impacts:
      description: "分析功能影響"
      method: "functional_impact_analysis"
      input: ["source_code_analysis", "test_file_analysis"]
      output: "functional_impact_assessment"
      validation:
        required_metrics: ["core_functionality", "optional_features", "integration_points"]
    
    identify_safety_concerns:
      description: "識別安全問題"
      method: "safety_analysis"
      input: ["config_file_analysis", "script_file_analysis"]
      output: "safety_concerns"
      validation:
        required_metrics: ["security_risks", "data_protection", "access_control"]

# 清理執行階段
cleanup_execution:
  description: "直接執行檔案清理操作"
  steps:
    execute_cleanup_operations:
      description: "執行清理操作"
      method: "cleanup_execution"
      input: ["cleanup_risk_assessment", "dependency_impact_assessment"]
      output: "cleanup_execution_log"
      validation:
        required_sections: ["safe_to_clean", "needs_review", "must_keep", "risk_warnings"]
    
    create_backup_protection:
      description: "創建備份保護"
      method: "backup_creation"
      input: "cleanup_risk_assessment"
      output: "backup_files"
      validation:
        required_features: ["safety_checks", "backup_mechanism", "error_handling", "logging"]
    
    generate_execution_report:
      description: "生成執行報告"
      method: "execution_report_generation"
      input: ["cleanup_execution_log", "backup_files", "risk_assessment"]
      output: "execution_report"
      validation:
        required_sections: ["executive_summary", "detailed_analysis", "execution_log", "risk_assessment", "backup_status"]

# 與其他代理的協作
collaboration:
  with_project_concluder:
    trigger: "parallel_execution_on_conclude"
    integration:
      - "file_classification_results"
      - "cleanup_execution_log"
      - "risk_assessment_summary"
    output_format: "structured_data_for_conclusion_report"
  
  with_knowledge_curator:
    trigger: "after_classification_complete"
    integration:
      - "file_organization_best_practices"
      - "knowledge_management_structure"
    output_format: "knowledge_base_contributions"
  
  with_architecture_documenter:
    trigger: "after_dependency_analysis"
    integration:
      - "file_structure_organization"
      - "module_boundary_definitions"
    output_format: "architecture_documentation_updates"

# 輸出格式定義
output_formats:
  classification_report:
    format: "markdown"
    sections:
      - "executive_summary"
      - "file_inventory"
      - "classification_results"
      - "execution_log"
      - "risk_assessment"
      - "backup_status"
  
  cleanup_scripts:
    format: "shell_script"
    features:
      - "safety_checks"
      - "backup_creation"
      - "dry_run_mode"
      - "error_handling"
      - "comprehensive_logging"
  
  risk_assessment:
    format: "structured_data"
    risk_levels:
      - "low": "minimal_impact"
      - "medium": "moderate_impact"
      - "high": "significant_impact"
      - "critical": "severe_impact"

# 驗證和品質保證
validation_and_quality:
  pre_execution_checks:
    - "required_files_available"
    - "permissions_validated"
    - "dependencies_resolved"
  
  execution_monitoring:
    - "progress_tracking"
    - "performance_monitoring"
    - "error_tracking"
  
  post_execution_validation:
    - "classification_accuracy"
    - "completeness_check"
    - "consistency_verification"
  
  quality_metrics:
    - "classification_precision"
    - "risk_assessment_accuracy"
    - "cleanup_safety_score"
    - "execution_efficiency"

# 錯誤處理和恢復
error_handling:
  classification_errors:
    action: "log_and_continue"
    fallback: "mark_for_manual_review"
  
  analysis_failures:
    action: "retry_with_reduced_scope"
    fallback: "skip_and_warn"
  
  risk_assessment_failures:
    action: "halt_execution"
    fallback: "generate_manual_review_list"
  
  cleanup_execution_failures:
    action: "halt_execution"
    fallback: "generate_manual_cleanup_guide"

# 執行配置
execution_config:
  timeout:
    file_scanning: "5m"
    classification_analysis: "10m"
    risk_assessment: "5m"
    cleanup_execution: "5m"
  
  retry_policy:
    max_retries: 3
    retry_delay: "30s"
    exponential_backoff: true
  
  resource_limits:
    max_memory: "2GB"
    max_cpu_percent: 80
    max_disk_io: "100MB/s"
