---
# Developer Orchestrator 工作流程
# 專為開發協調者設計的任務調度與管理工作流程
template: developer-orchestrator-workflow
version: 2.0

workflow:
  name: "Developer Orchestrator 協調工作流程"
  description: "專為技術協調專家設計的工作流程，專注於任務調度、代理協調和開發進度管理"
  enforcement_level: "strict"
  halt_on_validation_failure: true
  default_profile: "fast_strict"

# === 輸入定義 ===
inputs:
  task_id: "<required>"
  plan_path: "<auto>"
  project_root: "<auto>"
  developer_type: "orchestrator"

# === 計劃解析配置 ===
plan_resolution:
  find_by_task_id: true
  search_paths:
    - "{{project_root}}/docs/implementation-plan"
  supported_extensions:
    - "yaml"
    - "yml" 
    - "md"
  expectations:
    - name: "<task_id>-plan.md/<task_id>-plan.yaml/<task_id>-plan.yml"

# === 範圍管控 ===
guardrails:
  scope_source: "scope"
  out_of_scope_is_blocking: true
  on_scope_violation: "halt_and_report"

# === 前置條件 ===
preconditions:
  - "計劃文件存在於docs/implementation-plan/*並匹配task_id"
  - "計劃範本版本 == 1"
  - "metadata包含task_id、project_name、owner、date"
  - "sources路徑解析"
  - "assumptions和constraints已確認"

# === 執行協議 ===
execution_protocol:
  phases:
    1_plan_verification:
      name: "計劃驗證階段"
      description: "檢查並驗證實施計劃的存在性和完整性"
      actions:
        - "從`{project_root}/docs/implementation-plan/{task_id}-plan.md`讀取task_id對應的實施計劃"
        - "驗證計劃格式和必要欄位"
        - "確認計劃範圍和約束條件"
      
    2_task_classification:
      name: "任務分類階段"
      description: "分析計劃內容並分類任務類型和技術領域"
      actions:
        - "分析計劃內容涉及的技術領域"
        - "識別前端、後端、全端或重構需求"
        - "確定並行執行的可能性"
        - "評估任務複雜度和資源需求"
        - "檢查是否存在先前的審查文件（棕地狀態）"
        - "如為棕地狀態，讀取docs/implementation-review/{task_id}-review.md"
        - "分析審查文件中的問題和修復建議"
      
    3_agent_assignment:
      name: "代理分配階段"
      description: "根據任務分類智能分配並調度相應的專門代理"
      actions:
        - "根據`/Users/tszkinlai/Coding/AI workflow/core/dev/enforcement/developer-orchestrator-enforcement.md`中的任務類型映射規則選擇適當的子代理"
        - "啟動並行執行協議（如適用）"
        - "設定代理間的協調機制"
        - "傳遞任務上下文和執行參數"
        - "如為棕地狀態，將審查文件中的問題和修復建議傳遞給代理"
      
    4_progress_monitoring:
      name: "進度監控階段"
      description: "實時監控所有活躍代理的執行狀態和進度"
      actions:
        - "追蹤各代理的執行進度"
        - "監控資源使用情況"
        - "檢測潛在的瓶頸和風險"
        - "維護執行狀態日誌"
        - "如為棕地狀態，特別監控問題修復的進度"
      
    5_issue_resolution:
      name: "問題解決階段"
      description: "識別並解決執行過程中的問題和衝突"
      actions:
        - "檢測代理間的衝突和依賴問題"
        - "協調技術決策和實施策略"
        - "處理異常情況和錯誤恢復"
        - "優化執行策略和資源分配"
        - "如為棕地狀態，確保先前審查中的問題得到適當解決"
      
    6_completion_reporting:
      name: "完成報告階段"
      description: "生成開發記錄和最終報告"
      actions:
        - "收集所有代理的執行結果"
        - "使用標準模板`/Users/tszkinlai/Coding/AI workflow/core/dev/templates/dev-notes-tmpl.yaml`生成開發記錄"
        - "驗證開發記錄格式和內容"
        - "如為棕地狀態，在開發記錄中記錄問題修復情況"

# === 並行執行配置 ===
parallel_execution:
  enabled: true
  max_concurrent_agents: 6
  coordination_strategy: "real_time_sync"
  conflict_resolution: "orchestrator_mediated"

# === 輸出配置 ===
outputs:
  # 文檔生成已由主agent接管

# === 代理映射規則 ===
agent_mapping:
  backend_domains:
    - database: "backend-developer:database"
    - api: "backend-developer:api"
    - security: "backend-developer:security"
    - performance: "backend-developer:performance"
    - testing: "backend-developer:testing"
    - infrastructure: "backend-developer:infrastructure"
  
  frontend_domains:
    - ui_ux: "frontend-developer:ui-ux"
    - framework: "frontend-developer:framework"
    - performance: "frontend-developer:performance"
    - accessibility: "frontend-developer:accessibility"
    - testing: "frontend-developer:testing"
  
  fullstack_domains:
    - architecture: "fullstack-developer:architecture"
    - integration: "fullstack-developer:integration"
    - performance: "fullstack-developer:performance"
    - devops: "fullstack-developer:devops"
  
  refactor_domains:
    - code_quality: "refactor-developer:code-quality"
    - performance: "refactor-developer:performance"