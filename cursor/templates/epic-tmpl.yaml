---
# Epic Document Template v2 - Feature-Level Task List
# Powered by BMAD™ Core

template:
  id: epic-template-v2
  name: Epic Task List
  version: 2.0
  output:
    format: markdown
    filename: docs/epic.md
    title: "{{project_name}} Epic Task List"
    note: "Feature-level breakdown of implementation tasks"

sections:
  - id: epic-header
    title: Epic Information
    instruction: |
      Provide epic metadata:
      
      **Project:** {project_name}
      **Version:** {version}
      **Created:** {date}
      **Last Updated:** {date}
      **Total Tasks:** {count}
      **Completed:** {count}
      **Status:** In Progress / Completed
      
      **Epic Summary:**
      - Brief overview of what will be delivered
      - Key milestones or phases
      - Overall timeline expectations

  - id: tasks
    title: Tasks
    repeatable: true
    instruction: |
      List all feature-level tasks using checkbox format.
      Each task should be:
      - Feature-level (not atomic implementation steps)
      - Completable as a unit of work
      - Verifiable through DoD
      - Clearly mapped to requirements and architecture
      
      Format each task as:
      
      - [ ] Task-{id}: {Task Name (≤14 chars)}
        - **Description:** {1-2 sentences describing the feature}
        - **Requirements:** {REQ-001, REQ-002, NFR-001}
        - **Architecture:** {Component names from architecture}
        - **Dependencies:** {Task IDs this depends on, or "None"}
        - **Estimated Duration:** {rough estimate if known}
        - **DoD:**
          - {Specific completion criterion 1}
          - {Specific completion criterion 2}
          - All unit and integration tests passing
          - Code meets quality standards
          - Development notes completed
        - **Status:** pending
        - **Score:** 0.0 (updated after review)
      
      Example:
      - [ ] Task-1: User Login
        - **Description:** Implement JWT-based user authentication with login endpoint
        - **Requirements:** REQ-001, REQ-002, NFR-001
        - **Architecture:** Auth Service, User Database
        - **Dependencies:** None
        - **Estimated Duration:** 2-3 days
        - **DoD:**
          - Login endpoint accepts credentials and returns JWT
          - Token validation middleware implemented
          - Password hashing with bcrypt
          - All auth tests passing (coverage ≥80%)
          - Development notes completed
        - **Status:** pending
        - **Score:** 0.0
      
      **Task Numbering:**
      - Use sequential numbering: Task-1, Task-2, Task-3, etc.
      - Task IDs remain fixed once assigned
      
      **Status Values:**
      - pending: Not started
      - in-progress: Currently being worked on
      - completed: Finished and reviewed
      - blocked: Cannot proceed due to dependencies
      
      **Score Values:**
      - 0.0: Not yet reviewed
      - 6.0-10.0: Review score (updated by review process)

  - id: task-dependencies
    title: Task Dependencies
    instruction: |
      If tasks have dependencies, visualize them clearly:
      
      **Dependency Graph:**
      ```mermaid
      graph TD
          Task-1[Task-1: User Login]
          Task-2[Task-2: Profile API]
          Task-3[Task-3: Password Reset]
          
          Task-1 --> Task-2
          Task-1 --> Task-3
      ```
      
      **Dependency Table:**
      | Task ID | Depends On | Reason |
      |---------|------------|--------|
      | Task-2 | Task-1 | Requires authentication |
      | Task-3 | Task-1 | Uses auth tokens |
      
      **Parallel Execution Opportunities:**
      - List tasks that can be worked on in parallel
      - Identify critical path tasks
      
      If no dependencies exist, state: "All tasks are independent and can be executed in any order."

  - id: notes
    title: Notes
    instruction: |
      Add any additional notes or context:
      - Clarifications on task scope
      - Known challenges or risks
      - Sequencing recommendations
      - Resource allocation notes
