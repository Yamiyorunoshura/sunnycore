---
# PRD Template v2 - Product Requirements Document
# Powered by BMADâ„¢ Core

template:
  id: prd-template-v2
  name: Product Requirements Document
  version: 2.0
  output:
    format: markdown
    filename: docs/PRD.md
    title: "{{project_name}} Product Requirements Document"
    note: "Integrated document containing requirements, architecture, and tasks"

sections:
  - id: project-information
    title: Project Information
    instruction: |
      Provide essential project metadata:
      
      **Project Name:** {name}
      **Project Type:** Greenfield / Brownfield
      **Version:** {version}
      **Created:** {date}
      **Last Updated:** {date}
      **Status:** Draft/In Review/Approved
      
      **Project Description:**
      - Brief overview (2-3 paragraphs)
      - Key objectives and goals
      - Scope and boundaries
      - Success criteria
      
      **For Brownfield Projects:**
      - Reference existing system documentation
      - Summarize extension/modification scope
      - State integration requirements

  - id: requirements
    title: Requirements
    instruction: |
      This section contains all functional and non-functional requirements.
      
      Requirements must be:
      - Verifiable with clear pass/fail criteria
      - Complete and unambiguous
      - Measurable (especially NFRs)
      - Traceable to architecture and tasks
    sections:
      - id: functional-requirements
        title: Functional Requirements
        repeatable: true
        instruction: |
          For each functional requirement:
          
          ## REQ-{id}: {Requirement Title}
          
          **Description:** Clear statement of what the system must do
          
          **Acceptance Criteria:**
          Use Given-When-Then format:
          - **Given** {precondition}
            **When** {action}
            **Then** {expected result}
          
          (Include multiple scenarios for different cases: normal, edge, error)
          
          **Priority:** Critical/High/Medium/Low
          
          **Dependencies:** {List REQ IDs if dependent on others}
          
          Number sequentially: REQ-001, REQ-002, etc.
      
      - id: non-functional-requirements
        title: Non-Functional Requirements
        repeatable: true
        instruction: |
          For each non-functional requirement:
          
          ## NFR-{id}: {Requirement Title}
          
          **Category:** Performance/Security/Reliability/Usability/Maintainability/Scalability
          
          **Requirement:** Specific, quantified requirement
          
          **Target Metric:** Measurable target (e.g., "API response time P95 < 200ms")
          
          **Measurement Method:** How to verify and measure
          
          **Priority:** Critical/High/Medium/Low
          
          Number sequentially: NFR-001, NFR-002, etc.

  - id: architecture
    title: Architecture
    instruction: |
      This section defines the technical architecture to satisfy requirements.
      All architecture elements must map back to specific requirements.
    sections:
      - id: technical-stack
        title: Technical Stack
        instruction: |
          Document all technology selections in a table:
          
          | Category | Technology | Version | Purpose | Rationale |
          |----------|------------|---------|---------|-----------|
          | ... | ... | ... | ... | ... |
          
          Include:
          - Languages and runtimes
          - Frameworks and libraries
          - Databases
          - Cloud services (if applicable)
          - Development tools
          
          Use specific versions. This is the single source of truth.
      
      - id: components
        title: System Components
        repeatable: true
        instruction: |
          For each major component:
          
          ## {Component Name}
          
          **Responsibility:** What this component does
          
          **Technology:** Tech stack items used
          
          **Interfaces:** APIs or methods exposed
          
          **Dependencies:** Other components or services needed
          
          **For Brownfield:**
          - Mark as New/Modified/Existing
          - Include integration approach with existing system
      
      - id: data-flow
        title: Data Flow
        instruction: |
          Describe how data moves through the system:
          - Key workflows and data transformations
          - Communication patterns (REST/Events/Messages)
          - Synchronous vs asynchronous flows
          
          Include Mermaid diagrams for clarity:
          ```mermaid
          sequenceDiagram or graph
          ```
      
      - id: architecture-decisions
        title: Key Architecture Decisions
        repeatable: true
        instruction: |
          Document major decisions using ADR format:
          
          ## ADR-{id}: {Decision Title}
          
          **Context:** Why this decision was needed
          
          **Decision:** What was decided
          
          **Rationale:** Why this approach
          
          **Alternatives Considered:** Other options and why not chosen
          
          **Trade-offs:** Benefits and costs
          
          Number sequentially: ADR-001, ADR-002, etc.
      
      - id: requirements-mapping
        title: Requirements to Architecture Mapping
        instruction: |
          Create a traceability table ensuring 100% coverage:
          
          | Requirement | Architecture Elements | How Satisfied |
          |-------------|----------------------|---------------|
          | REQ-001 | {components} | {explanation} |
          | NFR-001 | {decisions/patterns} | {explanation} |
          
          Verify every requirement is mapped.
      
      - id: impact-analysis
        title: Impact Analysis
        condition: Brownfield projects only
        instruction: |
          For Brownfield projects, analyze impact on existing system:
          
          **Affected Components:**
          - Component name
          - Change type: New/Modified/Deprecated
          - Breaking change: Yes/No
          - Migration path if breaking
          
          **Integration Points:**
          - How new functionality integrates with existing
          - Preserved contracts and interfaces
          - Compatibility considerations
          
          **Risk Assessment:**
          - Potential risks from changes
          - Mitigation strategies

  - id: tasks
    title: Implementation Tasks
    instruction: |
      Break down requirements into feature-level tasks.
      Tasks should be:
      - Feature-level granularity (not atomic steps)
      - Verifiable with clear DoD
      - Mapped to requirements and architecture
      
      Use checkbox format for tracking:
    repeatable: true
    template: |
      - [ ] Task-{id}: {Task Name}
        - **Description:** {Brief description}
        - **Requirements:** {REQ IDs}
        - **Architecture:** {Component names}
        - **Dependencies:** {Task IDs if dependent}
        - **DoD:**
          - {Completion criterion 1}
          - {Completion criterion 2}
          - All tests passing
          - Code reviewed

  - id: constraints-and-assumptions
    title: Constraints and Assumptions
    instruction: |
      **Constraints:**
      - Technical constraints
      - Business constraints
      - Timeline and resource constraints
      - Regulatory or compliance requirements
      
      **Assumptions:**
      - Assumptions made during planning
      - Dependencies on external factors
      - Resource availability assumptions
      
      **Risks:**
      - Identified risks to delivery
      - Impact and probability
      - Mitigation strategies
