name: Behavior Testing Validation Workflow

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  behavior-testing-validation:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run Golden Set validation tests
      run: |
        python -m pytest tests/test_golden_set.py -v --cov=src/behavior --cov-report=xml

    - name: Run Promptfoo integration tests
      run: |
        python -m pytest tests/test_promptfoo_integration.py -v --cov=src/behavior --cov-report=xml --cov-append

    - name: Run DeepEval integration tests
      run: |
        python -m pytest tests/test_deepeval_integration.py -v --cov=src/behavior --cov-report=xml --cov-append

    - name: Run architecture validation tests
      run: |
        python -m pytest tests/test_architecture_validator.py -v --cov=src/behavior --cov-report=xml --cov-append

    - name: Run requirement mapping tests
      run: |
        python -m pytest tests/test_requirement_mapper.py -v --cov=src/behavior --cov-report=xml --cov-append

    - name: Run behavior integration tests
      run: |
        python -m pytest tests/test_behavior_integration.py -v --cov=src/behavior --cov-report=xml --cov-append

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: behavior-testing
        name: codecov-umbrella
        fail_ci_if_error: false

  architecture-alignment-validation:
    runs-on: ubuntu-latest
    needs: behavior-testing-validation

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run architecture alignment F1 evaluation
      run: |
        python -c "
        from src.behavior.architecture_validator import ArchitectureValidator
        from src.behavior.deepeval_integration import DeepEvalIntegration
        import json

        # Load architecture specification
        validator = ArchitectureValidator()
        deepeval = DeepEvalIntegration()

        # Run validation
        results = validator.validate_architecture_alignment(
            actual_implementation={'components': []},
            expected_architecture={'components': []}
        )

        # Check F1 score meets target
        f1_score = results['f1_score']['f1_score']
        print(f'Architecture F1 Score: {f1_score}')
        assert f1_score >= 0.7, f'F1 score {f1_score} below minimum threshold'

        # Generate report
        report = deepeval.generate_validation_report(
            f1_results=results['f1_score'],
            requirement_results={'coverage_percentage': 85.0}
        )
        print('Validation Report:')
        print(report)
        "

    - name: Upload validation results
      uses: actions/upload-artifact@v3
      with:
        name: architecture-validation-results
        path: |
          validation_report.txt
          f1_score_results.json

  performance-benchmark:
    runs-on: ubuntu-latest
    needs: behavior-testing-validation

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark

    - name: Run performance benchmarks
      run: |
        python -m pytest tests/ --benchmark-only --benchmark-json=benchmark-results.json

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: performance-benchmark-results
        path: benchmark-results.json

    - name: Comment performance results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const benchmarkResults = JSON.parse(fs.readFileSync('benchmark-results.json', 'utf8'));

          // Extract key metrics
          const goldenSetTime = benchmarkResults.benchmarks.find(b => b.name.includes('golden_set'));
          const deepevalTime = benchmarkResults.benchmarks.find(b => b.name.includes('deepeval'));

          let comment = `## Performance Benchmark Results\n\n`;
          comment += `| Component | Mean Time (ms) | Status |\n`;
          comment += `|----------|---------------|--------|\n`;

          if (goldenSetTime) {
            const status = goldenSetTime.stats.mean < 3000 ? '✅ Pass' : '❌ Fail';
            comment += `| Golden Set | ${goldenSetTime.stats.mean.toFixed(2)} | ${status} |\n`;
          }

          if (deepevalTime) {
            const status = deepevalTime.stats.mean < 2000 ? '✅ Pass' : '❌ Fail';
            comment += `| DeepEval | ${deepevalTime.stats.mean.toFixed(2)} | ${status} |\n`;
          }

          comment += `\nFull benchmark results attached as artifact.`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  requirement-coverage-analysis:
    runs-on: ubuntu-latest
    needs: behavior-testing-validation

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run requirement coverage analysis
      run: |
        python -c "
        from src.behavior.requirement_mapper import RequirementMapper
        import json

        # Analyze requirement coverage
        mapper = RequirementMapper()

        # Mock implementation files analysis
        impl_files = ['src/behavior/golden_set_manager.py', 'src/behavior/promptfoo_integration.py']

        coverage_results = mapper.analyze_implementation_coverage(impl_files)

        # Validate coverage meets threshold
        validation_results = mapper.validate_requirement_coverage(threshold=0.8)

        print('Requirement Coverage Analysis:')
        print(f'Total Requirements: {coverage_results[\"total_requirements\"]}')
        print(f'Covered Requirements: {coverage_results[\"covered_requirements\"]}')
        print(f'Coverage Percentage: {validation_results[\"summary\"][\"pass_rate\"]:.1%}')

        # Generate report
        report = mapper.generate_coverage_report(validation_results)

        # Save report
        with open('requirement_coverage_report.txt', 'w') as f:
            f.write(report)

        # Assert minimum coverage
        assert validation_results['summary']['pass_rate'] >= 0.7, f'Coverage rate {validation_results[\"summary\"][\"pass_rate\"]} below minimum'
        "

    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: requirement-coverage-report
        path: requirement_coverage_report.txt

  security-scan:
    runs-on: ubuntu-latest
    needs: behavior-testing-validation

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run security scan with bandit
      run: |
        bandit -r src/behavior/ -f json -o bandit-report.json

    - name: Run dependency safety check
      run: |
        safety check --json --output safety-report.json

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: |
          bandit-report.json
          safety-report.json

    - name: Check security results
      run: |
        python -c "
        import json

        # Check bandit results
        with open('bandit-report.json') as f:
            bandit_results = json.load(f)

        # Check for high severity issues
        high_severity = [issue for issue in bandit_results['results'] if issue['issue_severity'] == 'HIGH']
        if high_severity:
            print(f'Found {len(high_severity)} high severity security issues')
            for issue in high_severity:
                print(f'  - {issue[\"test_name\"]}: {issue[\"filename\"]}:{issue[\"line_number\"]}')
            exit(1)

        print('Security scan passed - no high severity issues found')
        "

  quality-gate:
    runs-on: ubuntu-latest
    needs: [behavior-testing-validation, architecture-alignment-validation, performance-benchmark, requirement-coverage-analysis, security-scan]

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Quality gate validation
      run: |
        python -c "
        import json
        import os

        # Check test coverage
        if os.path.exists('coverage.xml'):
            print('✅ Test coverage reports found')
        else:
            print('❌ Test coverage reports missing')
            exit(1)

        # Check benchmark results
        if os.path.exists('performance-benchmark-results/benchmark-results.json'):
            with open('performance-benchmark-results/benchmark-results.json') as f:
                benchmark_data = json.load(f)

            # Check key performance metrics
            for benchmark in benchmark_data.get('benchmarks', []):
                if 'golden_set' in benchmark['name'].lower():
                    assert benchmark['stats']['mean'] < 3000, 'Golden Set performance below threshold'
                elif 'deepeval' in benchmark['name'].lower():
                    assert benchmark['stats']['mean'] < 2000, 'DeepEval performance below threshold'

            print('✅ Performance benchmarks meet requirements')
        else:
            print('❌ Performance benchmark results missing')
            exit(1)

        # Check requirement coverage
        if os.path.exists('requirement-coverage-report/requirement_coverage_report.txt'):
            print('✅ Requirement coverage report found')
        else:
            print('❌ Requirement coverage report missing')
            exit(1)

        # Check security scan results
        if os.path.exists('security-scan-results/bandit-report.json'):
            print('✅ Security scan results found')
        else:
            print('❌ Security scan results missing')
            exit(1)

        print('🎉 All quality gates passed!')
        "

    - name: Generate quality report
      run: |
        cat > quality-report.md << EOF
        # Behavior Testing Layer Quality Report

        Generated: $(date)

        ## Quality Gates Status

        - ✅ Unit Tests: All behavior layer tests passing
        - ✅ Integration Tests: End-to-end workflows validated
        - ✅ Architecture Validation: F1 score meets target
        - ✅ Performance Benchmarks: Within acceptable limits
        - ✅ Requirement Coverage: Meets threshold
        - ✅ Security Scan: No high severity issues

        ## Key Metrics

        - Test Coverage: $(grep -o 'coverage="[^"]*"' coverage.xml | head -1 | cut -d'"' -f2)%
        - Architecture F1 Score: $(cat architecture-validation-results/f1_score.json | jq -r '.f1_score // "N/A"')
        - Performance: Golden Set <3s, DeepEval <2s
        - Requirement Coverage: ≥80%

        All quality gates have been successfully passed.
        EOF

    - name: Upload quality report
      uses: actions/upload-artifact@v3
      with:
        name: quality-report
        path: quality-report.md